package com.yumodev.rxjava2;

import android.util.Log;

import com.yumo.demo.view.YmTestFragment;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.Observer;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Action;
import io.reactivex.functions.Consumer;
import io.reactivex.internal.schedulers.IoScheduler;
import io.reactivex.schedulers.Schedulers;

/**
 * Created by yumodev on 17/10/12.
 * 两种观察者模式
 * Observable(被观察者)/Observer(观察者) 不支持背压。
 * Flowable(被观察者)/Subscriber(观察者) 支持背压BackPressure
 */

public class RxJava2TestView extends YmTestFragment {
    private String LOG_TAG = "RxJava2TestView";
    Observer<Integer> mSubscriber = null;
    Observable mObservable = null;

    public void testShowToast() {
        showToastMessage("test");
    }

    /**
     * 一个最简单的RxJava2 实例
     * 创建Observable
     * 创建Observer
     * 建立订阅关系。
     */
    public void testRxJava2() {
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(@NonNull ObservableEmitter<Integer> e) throws Exception {
                for (int i = 0; i < 10; i++) {
                    e.onNext(i);
                }
                e.onComplete();
            }
        }).subscribe(new Observer<Integer>() {
            /**
             * 解决订阅 类似月RxJava1.x中的Subscription。
             * @param d
             */
            @Override
            public void onSubscribe(@NonNull Disposable d) {
            }

            @Override
            public void onNext(@NonNull Integer integer) {
                Log.i(Define.LOG_TAG, "onNext:" + integer);
            }

            @Override
            public void onError(@NonNull Throwable e) {

            }

            @Override
            public void onComplete() {
                Log.i(Define.LOG_TAG, "onComplete");
            }
        });
    }

    /**
     * 取消订阅
     */
    public void testOnSubscribe() {
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter<Integer> e) throws Exception {
                for (int i = 0; i < 10; i++) {
                    e.onNext(i);
                    if (i > 5) {
                        //e.setDisposable();
                    }
                }
                e.onComplete();
            }
        }).subscribe(new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.i(LOG_TAG, "onSubscribe:" + d.isDisposed());
            }

            @Override
            public void onNext(Integer integer) {
                Log.i(LOG_TAG, "onNext:" + integer);
            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onComplete() {
                Log.i(LOG_TAG, "onComplete");
            }
        });
    }


    /**
     * 制定运行线程，和Rxjava1 一样。
     */
    public void testRxJava2On() {
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(@NonNull ObservableEmitter<Integer> e) throws Exception {
                Log.i(LOG_TAG, Thread.currentThread().getName());
                for (int i = 0; i < 10; i++) {
                    e.onNext(i);
                }
                e.onComplete();
            }
        }).subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Integer>() {
                    @Override
                    public void onSubscribe(@NonNull Disposable d) {
                    }

                    @Override
                    public void onNext(@NonNull Integer integer) {
                        Log.i(Define.LOG_TAG, "onNext:" + integer);
                    }

                    @Override
                    public void onError(@NonNull Throwable e) {

                    }

                    @Override
                    public void onComplete() {
                        Log.i(Define.LOG_TAG, "onComplete");
                        Log.i(LOG_TAG, Thread.currentThread().getName());
                    }
                });
    }

    public void testCountDown() {
        mSubscriber = new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            //观察者接收到通知,进行相关操作
            public void onNext(Integer value) {
                Log.i(LOG_TAG, "当前计时：" + value);
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {

            }
        };


        mObservable = RxCountDown.countdown(100);

        mObservable
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(mSubscriber);
    }

    public void testUnSubscribe() {
        //mSubscriber.unsubscribe();
    }

    public void testUnReSubscribe() {
//        mObservable.subscribe(new Consumer() {
//            @Override
//            public void accept(Integer value) {
//                Log.i(LOG_TAG, "当前计时：" + value);
//            }
//        });
    }
}
