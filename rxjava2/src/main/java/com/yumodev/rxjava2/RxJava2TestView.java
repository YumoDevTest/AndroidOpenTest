package com.yumodev.rxjava2;

import android.util.Log;

import com.yumo.demo.view.YmTestFragment;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.Observer;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Action;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

/**
 * Created by yumodev on 17/10/12.
 */

public class RxJava2TestView extends YmTestFragment {
    private String LOG_TAG = "RxJava2TestView";
    Observer<Integer> mSubscriber = null;
    Observable mObservable = null;
    public void testShowToast(){
        showToastMessage("test");
    }

    public void testRxJava2(){
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(@NonNull ObservableEmitter<Integer> e) throws Exception {
                for (int i = 0; i < 10; i++){
                    e.onNext(i);
                }
                e.onComplete();
            }
        }).subscribe(new Observer<Integer>() {
            @Override
            public void onSubscribe(@NonNull Disposable d) {
            }

            @Override
            public void onNext(@NonNull Integer integer) {
                Log.i(Define.LOG_TAG, "onNext:"+integer);
            }

            @Override
            public void onError(@NonNull Throwable e) {

            }

            @Override
            public void onComplete() {

            }
        });
    }

    public void testCountDown(){
        mSubscriber = new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            //观察者接收到通知,进行相关操作
            public void onNext(Integer value) {
                Log.i(LOG_TAG, "当前计时：" + value);
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {

            }
        };


        mObservable = RxCountDown.countdown(100);

        mObservable
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(mSubscriber);
    }

    public void testUnSubscribe(){
        //mSubscriber.unsubscribe();
    }

    public void testUnReSubscribe(){
//        mObservable.subscribe(new Consumer() {
//            @Override
//            public void accept(Integer value) {
//                Log.i(LOG_TAG, "当前计时：" + value);
//            }
//        });
    }
}
