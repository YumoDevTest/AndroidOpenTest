package com.yumodev.ui.module.stack;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.ViewUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.widget.FrameLayout;
import android.widget.OverScroller;

import com.yumodev.ui.util.YmViewUtils;

import java.util.ArrayList;
import java.util.List;

import static android.support.v4.widget.ViewDragHelper.INVALID_POINTER;

/**
 * Created by yumodev on 18/1/10.
 * 堆叠视图
 */

public class StackView extends FrameLayout {
    private final String LOG_TAG = "StackView";

    private List<StackEntry> mDataList = new ArrayList<>();
    private OverScroller mScroller;

    private float mInitialY;
    private float mInitialX;
    private float mLastY;
    private float mLastX;
    private int mActivePointerId;
    private int mYVelocity = 0;
    private int mSlideAmount;
    private int mSwipeThreshold;
    private int mTouchSlop;
    private int mMaximumVelocity;
    private VelocityTracker mVelocityTracker;

    private int mViewHeight;

    public StackView(@NonNull Context context) {
        super(context);
        init();
    }

    public StackView(@NonNull Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public StackView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init(){
        mScroller = new OverScroller(getContext());

        ViewConfiguration viewConfiguration = ViewConfiguration.get(getContext());
        mTouchSlop = viewConfiguration.getScaledTouchSlop();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        for (int i =0; i <getChildCount(); i++){
            View childView = getChildAt(i);
            measureChild(childView, widthMeasureSpec, heightMeasureSpec);
        }
    }

    @Override
    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        if (changed){
            layoutChildView();
        }

    }

    public void setDataList(List<StackEntry> dataList){
        mDataList = dataList;
        int childCount = mDataList.size();

        for (int i = 0; i < childCount; i++) {
            StackChildView childView = (StackChildView) getChildAt(i);
            StackEntry data = mDataList.get(i);
            if (childView == null) {
                childView = new StackChildView(getContext(), data);
                addView(childView);
            } else {
                childView.updateData(data);
            }
        }
        invalidate();
    }

//    private void layoutChildView(int left, int top, int right, int bottom){
//        int childCount = mDataList.size();
//
//        for (int i = 0; i < childCount; i++){
//            StackChildView childView = (StackChildView) getChildAt(i);
//            bottom = top + YmViewUtils.dip2px(getContext(), 300);
//            childView.layout(left, top, right, bottom);
//            int transLayoutY = i * 100;
//            childView.setTranslationY(transLayoutY);
//            float scaleX = 0.8f+(0.05f * i);
//            childView.setScaleX(scaleX);
//        }
//    }

    @Override
    public boolean onInterceptTouchEvent(MotionEvent ev) {
        int pointerIndex = ev.findPointerIndex(mActivePointerId);
        if (pointerIndex == INVALID_POINTER) {
            // no data for our primary pointer, this shouldn't happen, log it
            Log.d(LOG_TAG, "Error: No data for our primary pointer.");
            return false;
        }
        float x = ev.getX(pointerIndex);
        float y = ev.getY(pointerIndex);
        switch (ev.getActionMasked()){
            case MotionEvent.ACTION_DOWN:{

                mInitialX = x;
                mInitialY = y;
                break;
            }
            case MotionEvent.ACTION_MOVE:{
                return true;
            }
            case MotionEvent.ACTION_UP:{
                break;
            }
        }
        return super.onInterceptTouchEvent(ev);
    }

    @Override
    public boolean onTouchEvent(MotionEvent ev) {
        int pointerIndex = ev.findPointerIndex(mActivePointerId);
        if (pointerIndex == INVALID_POINTER) {
            // no data for our primary pointer, this shouldn't happen, log it
            Log.d(LOG_TAG, "Error: No data for our primary pointer.");
            return false;
        }

        float x = ev.getX(pointerIndex);
        float y = ev.getY(pointerIndex);
        Log.i(LOG_TAG, ev.getActionMasked()+" x:"+x+" y:"+y+" mScrollX:"+mScroller.getStartX()+" "+mScroller.getStartY());
        switch (ev.getActionMasked()){
            case MotionEvent.ACTION_DOWN:{
                mLastX = x;
                mLastY = y;
                return true;
            }
            case MotionEvent.ACTION_MOVE:{
                float delaX = x - mInitialX;
                float delaY = y - mInitialY;
                //mScroller.startScroll(mScroller.getStartX(), mScroller.getStartY(), 0, (int)delaY);
                layoutChildView((int)y);
                break;
            }
            case MotionEvent.ACTION_UP:{
                break;
            }
        }
        return super.onTouchEvent(ev);
    }

    @Override
    public void computeScroll() {
        Log.i(LOG_TAG, "computeScroll:"+mScroller.getCurrY()+" "+mScroller.computeScrollOffset());
        if (mScroller.computeScrollOffset()){
            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());
            layoutChildView();
        }
    }

    private void layoutChildView(){
        int childCount = getChildCount();

        float progress;
        for (int i = 0; i < childCount; i++){
            StackChildView childView = (StackChildView) getChildAt(i);
            progress = StackUtils.getScrollP();
            int transLayoutY = StackUtils.getTransLayY();
            childView.setTranslationY(scrollY);
            float scaleX = StackUtils.getScale();
            childView.setScaleX(scaleX);
        }
    }
}
