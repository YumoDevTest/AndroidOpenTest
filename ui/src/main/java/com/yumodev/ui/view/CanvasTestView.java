package com.yumodev.ui.view;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.Build;
import android.view.View;

import com.yumo.demo.view.YmTestFragment;

/**
 * Created by yumodev on 17/9/21.
 *
 * Canvas
 *
 *
 * Paint
 *
 * setColor：设置绘制的颜色
 * setStyle(): FILL：填充模式, STROKE：实线，FILL_AND_STROKE：
 * setStrokeWidth:设置线条的宽度
 * setAntiAlias:设置抗锯齿，设置了抗锯齿后更加光滑
 */

public class CanvasTestView extends YmTestFragment {

    public void testShowCanvasDemo(){
        View view = new CanvasDemoView(getContext());
        showTestView(view);
    }

    public void testCircleView(){
        showTestView(new TestCircleView(getContext()));
    }

    /**
     * 绘制原型
     * drawCircle(centerX, centerY, radius, paint)
     * centerX, centerY:圆心坐标
     * radius：圆的半径
     */
    class TestCircleView extends View{

        public TestCircleView(Context context){
            super(context);
        }
        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            Paint paint = new Paint();
            //设置绘制颜色
            paint.setColor(Color.RED);
            //设置填充类型
            paint.setStyle(Paint.Style.STROKE);
            //设置边框宽度
            paint.setStrokeWidth(5);
            //画板背景。 定义白色画板背景
            canvas.drawColor(Color.WHITE);

            //昨上角绘制一个原型。
            canvas.drawCircle(100, 100, 100, paint);

            paint.setStyle(Paint.Style.FILL);
            canvas.drawCircle(100, 300, 100, paint);
        }
    }

    public void testOvalView(){
        showTestView(new TestOvalView(getContext()));
    }

    /**
     * 绘制椭圆
     * drawOval(left,top,right,bottom,paint)
     */
    class TestOvalView extends View{

        public TestOvalView(Context context){
            super(context);
        }
        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            Paint paint = new Paint();
            //设置绘制颜色
            paint.setColor(Color.RED);
            //设置填充类型
            paint.setStyle(Paint.Style.STROKE);
            //设置边框宽度
            paint.setStrokeWidth(5);
            //画板背景。 定义白色画板背景
            canvas.drawColor(Color.WHITE);

            //昨上角绘制一个原型。
            canvas.drawOval(0, 0, 100, 200, paint);

            paint.setStyle(Paint.Style.FILL);
            RectF rectF = new RectF(0, 200, 200, 300);
            canvas.drawOval(rectF, paint);
        }
    }


    public void testArcView(){
        showTestView(new TestArcView(getContext()));
    }

    /**
     * 绘制弧形和扇形
     * drawArc(left,top,right,bottom,startAngle, sweepAngle, useCenter)
     * startAngle是弧形的起始角度
     * sweepAngle 弧形划过的角度
     * userCenter:表示是否连接到原型。不连接到圆心是弧形，连接到圆心是扇形
     */
    class TestArcView extends View{

        public TestArcView(Context context){
            super(context);
        }
        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            Paint paint = new Paint();
            //设置绘制颜色
            paint.setColor(Color.RED);
            //设置填充类型
            paint.setStyle(Paint.Style.STROKE);
            //设置边框宽度
            paint.setStrokeWidth(5);
            //画板背景。 定义白色画板背景
            canvas.drawColor(Color.WHITE);

            //昨上角绘制一个原型。

            canvas.drawArc(0,0,100,100, 90, 180, true, paint);

//            paint.setStyle(Paint.Style.FILL);
//            RectF rectF = new RectF(0, 200, 200, 300);
//            canvas.drawOval(rectF, paint);
        }
    }


    public void testTestDrawRectView(){
        showTestView(new TestDrawRectView(getContext()));
    }

    /**
     * 绘制矩形，圆角矩形
     */
    class TestDrawRectView extends View{
        public TestDrawRectView(Context context){
            super(context);
        }

        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            Paint paint = new Paint();
            //设置绘制颜色
            paint.setColor(Color.RED);
            //设置填充类型
            paint.setStyle(Paint.Style.STROKE);
            //设置边框宽度
            paint.setStrokeWidth(5);
            //画板背景。 定义白色画板背景
            canvas.drawColor(Color.WHITE);

            canvas.drawRect(0,0,100,100, paint);

            paint.setStyle(Paint.Style.FILL);
            Rect rect = new Rect(0, 100, 100, 200);
            canvas.drawRect(rect, paint);

            paint.setColor(Color.BLUE);
            RectF rectF = new RectF(0, 200, 100, 300);
            canvas.drawRect(rectF, paint);

            canvas.drawRoundRect(100, 400, 300, 600, 50, 50, paint);
            paint.setColor(Color.YELLOW);
            canvas.drawRoundRect(100, 650, 300, 850, 50, 50, paint);
            paint.setColor(Color.DKGRAY);
            canvas.drawRoundRect(100, 900, 300, 1150, 50, 50, paint);
        }
    }


    public void testTestPointView(){
        showTestView(new TestDrawPointView(getContext()));
    }

    /**
     * 绘制点
     * drawPoint(x,y,paint)绘制点
     * drawPoint(float[] pts,paint) 批量画点
     * drawPints(float[] pts, offset, count paint)
     * paint.setStrokeWidth(width) 设置点的大小
     *
     * paint.setStrokeCap()设置点的形状，ROUND:圆头， BUTT:平头， SQUARE:方头
     *
     *
     *
     */
    class TestDrawPointView extends View{
        public TestDrawPointView(Context context){
            super(context);
        }

        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            Paint paint = new Paint();
            //设置绘制颜色
            paint.setColor(Color.RED);
            //设置填充类型
            paint.setStyle(Paint.Style.STROKE);
            //设置边框宽度
            paint.setStrokeWidth(50);
            //画板背景。 定义白色画板背景
            canvas.drawColor(Color.WHITE);

            paint.setStrokeCap(Paint.Cap.ROUND);
            canvas.drawPoint(0,30, paint);

            paint.setStrokeCap(Paint.Cap.SQUARE);
            canvas.drawPoint(100,30, paint);

            paint.setStrokeCap(Paint.Cap.BUTT);
            canvas.drawPoint(200,30, paint);


        }
    }

    class CanvasDemoView extends View {

        /**
         * @param context
         */
        public CanvasDemoView(Context context) {
            super(context);
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            //首先定义画笔
            Paint paint = new Paint();
            paint.setColor(Color.BLUE);
            paint.setStyle(Paint.Style.STROKE);
            paint.setStrokeWidth(5);
            //画板背景。 定义白色画板背景
            canvas.drawColor(Color.WHITE);

            //直线。
            canvas.drawLine(0, 0, 200, 200, paint);

            canvas.drawPoint(30, 30, paint);

            canvas.drawPoints(new float[]{30, 30, 40, 40, 50, 50}, paint);

            //巨型
            canvas.drawRect(0, 0, 200, 200, paint);

            Rect rect = new Rect(10, 10, 60, 60);
            canvas.drawRect(rect, paint);

            RectF rect1 = new RectF(80, 80, 160, 160);
            canvas.drawRoundRect(rect1, 10, 20, paint);

            //圆形。
            canvas.drawCircle(200, 200, 100, paint);

            canvas.drawArc(new RectF(400, 400, 500, 500), 0, 230, true, paint);

            canvas.drawOval(new RectF(300, 10, 500, 200), paint);

            Path path = new Path();
            path.moveTo(0, 250);
            path.lineTo(200, 450);
            path.lineTo(450, 20);
            path.close();
            canvas.drawPath(path, paint);

            //绘制文本
            canvas.drawText("绘制文本", 300, 0, paint);

            //圆形路径文本
            Path pathCircle = new Path();
            pathCircle.addCircle(400, 100, 100, Path.Direction.CCW);
            canvas.drawTextOnPath("pathCircle", pathCircle, 10, 20, paint);
        }
    }
}
