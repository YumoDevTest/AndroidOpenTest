package com.yumodev.ui.recyclerview.nestedscroll;

import android.animation.ObjectAnimator;
import android.content.Context;
import android.support.annotation.Nullable;
import android.support.v4.view.NestedScrollingParent;
import android.support.v7.widget.RecyclerView;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.widget.LinearLayout;

import com.yumodev.ui.recyclerview.Define;

/**
 * Created by yumodev on 17/12/15.
 * [](http://www.jianshu.com/p/aff5e82f0174)
 */

public class NestedLayout extends LinearLayout implements NestedScrollingParent {
    private final String LOG_TAG = "NestedLayout"+ Define.INSTANCE.getLOG_TAG();

    private ViewGroup mStickView;
    private int mScrollTouchSlop = 0;
    private int mStickViewHeight = 0;
    private ViewGroup mChildScrollView;

    public NestedLayout(Context context) {
        super(context);
        init();
    }

    public NestedLayout(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public NestedLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init(){
        ViewConfiguration configuration = ViewConfiguration.get(getContext());
        mScrollTouchSlop = configuration.getScaledTouchSlop();
    }

    public void setStickView(ViewGroup viewGroup, int height){
        mStickView = viewGroup;
        mStickViewHeight = height;
        Log.i(LOG_TAG, "StickViewHeight:"+height);
    }

    public void setmChildScrollView(ViewGroup scrollView){
        mChildScrollView = scrollView;
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
    }

    @Override
    public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) {
        //return super.onStartNestedScroll(child, target, nestedScrollAxes);
        Log.i(LOG_TAG, "onStopNestedScroll: nestedScrollAxes:"+nestedScrollAxes+" "+child.getClass().getSimpleName());
        return true;
    }


    @Override
    public void onNestedPreScroll(View target, int dx, int dy, int[] consumed) {
        super.onNestedPreScroll(target, dx, dy, consumed);
        Log.i(LOG_TAG, "onNestedPreScroll: "+target.getClass().getSimpleName()+" dx:"+dx+" dy:"+dy);
        Log.i(LOG_TAG, "onNestedPreScroll:"+consumed[0]+" "+consumed[1]);

        boolean canDown = mChildScrollView.canScrollVertically(0);
        boolean canUp = mChildScrollView.canScrollVertically(-1);
        if (!canUp && dy < -mStickViewHeight / 2 ){
            if (mStickView.getVisibility() != View.VISIBLE){
                //mStickView.setVisibility(View.VISIBLE);
                showStickView();
            }
        }
        Log.i(LOG_TAG, "onNestedPreScroll:"+canDown+" "+canUp);
    }

    @Override
    public void onStopNestedScroll(View child) {
        super.onStopNestedScroll(child);
        Log.i(LOG_TAG, "onStopNestedScroll:"+child.getClass().getSimpleName());
    }


    private void showStickView(){
        ObjectAnimator animator = ObjectAnimator.ofFloat(mStickView, "translationY", -mStickViewHeight, 0);
        animator.setDuration(500);
        animator.start();
    }
}
